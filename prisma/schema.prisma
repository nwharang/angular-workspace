generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Localize {
  en
  vi
}

enum Role {
  admin
  user
}

enum Status {
  Backlog
  InProgress
  Completed
}

enum OrderStatus {
  InProgress
  Completed
  Canceled
}

enum InvitationStatus {
  Pending
  Accepted
  Rejected
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  status      Status   @default(Backlog)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  effDate     DateTime @default(now())
  endDate     DateTime
  Member      Member   @relation(fields: [memberId], references: [id])
  memberId    String   @db.ObjectId
  Project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String   @db.ObjectId
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  member      Member[]
  task        Task[]
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String            @unique
  photo           String?
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  localize        Localize?         @default(en)
  member          Member[]
  role            Role              @default(user)
  ShoppingSession ShoppingSession[]
}

model Member {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  User             User?            @relation(fields: [userId], references: [id])
  userId           String?          @db.ObjectId
  Project          Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String           @db.ObjectId
  InvitationStatus InvitationStatus @default(Pending)
  task             Task[]
  owner            Boolean          @default(false)
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       BigInt
  image       String?
  description String?
  unit        String
  CartItem    CartItem[]
}

model CartItem {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  qty               BigInt          @default(1)
  ShoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id], onDelete: Cascade)
  shoppingSessionId String          @db.ObjectId
  Product           Product         @relation(fields: [productId], references: [id])
  productId         String          @db.ObjectId

  @@unique([shoppingSessionId, productId])
}

model ShoppingSession {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  total    BigInt     @default(0)
  User     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String     @unique @db.ObjectId
  CartItem CartItem[]
  Order    Order?
}

model Order {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  status            OrderStatus      @default(InProgress)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  address           String?
  ShoppingSession   ShoppingSession? @relation(fields: [shoppingSessionId], references: [id])
  shoppingSessionId String?          @unique @db.ObjectId
}
